import numpy as np
import os
from calculations import compute_affine_from_raw_file, load_magnetometer_raw

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
try:
    from config import CFG_FILE, CFG_LOAD, CFG_ALG
except ImportError:
    print("–û–®–òB–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ config.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–¥—É–ª—å –º–æ–≥ —Ö–æ—Ç—è –±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
    CFG_FILE = {"realtime_calib_storage_file": "mag_calib.npz"}
    CFG_LOAD = {"data_columns": (8, 9, 10)}
    CFG_ALG = {"calibrator_initial_scale": 1.0}


class MagnetometerCalibrator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–∞–≥–Ω–∏—Ç–æ–º–µ—Ç—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """

    def __init__(self, initial_scale: float = None):
        if initial_scale is None:
            initial_scale = CFG_ALG["calibrator_initial_scale"]
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–µ–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞, –Ω—É–ª–µ–≤–æ–π —Å–¥–≤–∏–≥)
        self.A = np.eye(3) * initial_scale
        self.b = np.zeros(3)
        self.is_calibrated = False

    def calibrate(self, calibration_file: str, cols: tuple = None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–∞–ª–∏–±—Ä–æ–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É A –∏ –≤–µ–∫—Ç–æ—Ä b.

        :param calibration_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏.
        :param cols: –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ (x, y, z). –ï—Å–ª–∏ None, –±–µ—Ä—É—Ç—Å—è –∏–∑ config.
        """
        if cols is None:
            cols = CFG_LOAD["data_columns"]
            
        print(f"üî¨ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–π–ª—É: {calibration_file} (–∫–æ–ª–æ–Ω–∫–∏ {cols})...")
        if not os.path.isfile(calibration_file):
            raise FileNotFoundError(
                f"–§–∞–π–ª –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {calibration_file}"
            )

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞—Ñ—Ñ–∏–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            self.A, self.b, params = compute_affine_from_raw_file(
                calibration_file, cols=cols
            )
            self.is_calibrated = True
            print("‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            print("  –ú–∞—Ç—Ä–∏—Ü–∞ A (soft-iron):\n", self.A)
            print("  –í–µ–∫—Ç–æ—Ä b (hard-iron):", self.b)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            self.is_calibrated = False

    def correct(self, raw_point: np.ndarray) -> np.ndarray:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∫ –æ–¥–Ω–æ–º—É –≤–µ–∫—Ç–æ—Ä—É (x, y, z).
        –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.

        :param raw_point: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ [x, y, z] –≤ –≤–∏–¥–µ numpy array.
        :return: –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ [x_cal, y_cal, z_cal].
        """
        return raw_point @ self.A.T + self.b

    def save_calibration(self, filepath: str = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (A –∏ b) –≤ —Ñ–∞–π–ª.

        :param filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ config.
        """
        if filepath is None:
            filepath = CFG_FILE["realtime_calib_storage_file"]
            
        if not self.is_calibrated:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
            return
        np.savez(filepath, A=self.A, b=self.b)
        print(f"üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filepath}")

    def load_calibration(self, filepath: str = None):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ (A –∏ b) –∏–∑ —Ñ–∞–π–ª–∞.

        :param filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ï—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ config.
        """
        if filepath is None:
            filepath = CFG_FILE["realtime_calib_storage_file"]

        if not os.path.isfile(filepath):
            raise FileNotFoundError(
                f"–§–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}"
            )

        data = np.load(filepath)
        self.A = data["A"]
        self.b = data["b"]
        self.is_calibrated = True
        print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {filepath}")
